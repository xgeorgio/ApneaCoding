C
C ... SOSUS VER.2: SPHERICAL GEODESICS ...
C
      PROGRAM SOSUS2H

      INTEGER ITER, MAXITER, ERR, SCR
      DOUBLE PRECISION A(2,2), B(2), X(2), DX(2), PREC, MAXPREC
      DOUBLE PRECISION LAT(3), LON(3), TM(3), SPD, ER, H, AR, XDIST1

      COMMON XDIST1

C
C ... DEFINE THE MODEL PARAMETERS ...
C
C SPEED OF SOUND IN WATER, ROUGHLY IN DEG/SEC
C IN SOFAR CHANNEL (DEPTH > 3KM) SPEED IS 1.48-1.52 KM/SEC
C NOTE: 1.50 (KM/SEC) -> /(2*PI*ER)*360 (DEG/SEC)
      DATA SPD /0.013497357/
C STEP FOR DERIVATIVE APPROXIMATION (KM)
      DATA H /0.0001/
C ADJUSTMENT RATIO SCALING (SMALL POSITIVE)
      DATA AR /0.07/
C MAXIMUM ITERATIONS FOR SOLVER 
      DATA MAXITER /1000/
C PRECISION REQUIRED FOR SOLVER
      DATA MAXPREC /0.00001/

C DISPLAY RESULTS EVERY (ITERATIONS)
      SCR = 50
C RANGE ESTIMATION AT 1ST DETECTION (KM)
C NOTE: THIS IS TO AVOID A FULL 3x3 SYSTEM, USUALLY AVAILABLE
C INDIRECTLY VIA SOUND TIME STRETCHING DUE TO MULTIPATH EFFECTS
      XDIST1 = 484.860

C
C ... TEST SET: LOCATIONS OF 3 DETECTION STATIONS ...
C
C STATIONS (ATLANTIC OCEAN): NOVA SCOTIA, BERMUDA, NORFOLK
C NOTE: LON IS USED +90 DEG TO CONVERT TO POSITIVE VALUES
      DATA LAT /44.351786, 32.452274, 36.760210/
      DATA LON /26.420016, 25.036205, 14.219518/
C DETECTION TIME (SEC) AT 3 STATIONS
C NOTE: 1ST DETECTION TIME IS NOT EXPLICITLY KNOWN (SEE XDIST1)
C CONFIG 1: EQUI-DISTANCE CHECK (38.5980,22.1890)
C     DATA TM  /486.547, 486.547, 486.547/
C CONFIG 2: PERTUBATED CHECK (38.6120,22.2177)
      DATA TM /323.240, 562.148, 724.390/

C INITIALIZE SOLUTION VECTOR (LAT, LON)
      DATA X /45.0,45.0/, DX /0.0,0.0/

C
C ... MAIN ROUTINE ...
C
      WRITE(*,*) 'SOSUS VER.2: SPHERICAL GEODESICS'
      WRITE(*,*) ' '

C DISPLAY DETECTION STATIONS DATA 
      WRITE(*,*) '--- DETECTION STATIONS:'
   4  FORMAT(1X,'LAT=',F10.6,' , LON=',F10.6,' => DELTA=',F10.3)
      WRITE(*,4) LAT(1), LON(1)-90.0, TM(1)
      WRITE(*,4) LAT(2), LON(2)-90.0, TM(2)
      WRITE(*,4) LAT(3), LON(3)-90.0, TM(3)
      WRITE(*,*) ' '

C 
C ... BEGIN SOLVER LOOP ...
C
      ITER = 1
      PREC = MAXPREC*10
  10  IF ( (PREC .LE. MAXPREC) .OR. (ITER .GT. MAXITER) ) GOTO 71
      
C CONSTRUCT THE 2x2 GEODESIC SYSTEM (JACOBIAN)
      A(1,1) = ( DDF(X(1)+H,X(2),LAT,LON,TM,2,SPD) - 
     *DDF(X(1)-H,X(2),LAT,LON,TM,2,SPD) ) / (2*H)
      A(1,2) = ( DDF(X(1),X(2)+H,LAT,LON,TM,2,SPD) - 
     *DDF(X(1),X(2)-H,LAT,LON,TM,2,SPD) ) / (2*H)
      A(2,1) = ( DDF(X(1)+H,X(2),LAT,LON,TM,3,SPD) - 
     *DDF(X(1)-H,X(2),LAT,LON,TM,3,SPD) ) / (2*H)
      A(2,2) = ( DDF(X(1),X(2)+H,LAT,LON,TM,3,SPD) - 
     *DDF(X(1),X(2)-H,LAT,LON,TM,3,SPD) ) / (2*H)
      B(1) = -DDF(X(1),X(2),LAT,LON,TM,2,SPD)
      B(2) = -DDF(X(1),X(2),LAT,LON,TM,3,SPD)

C DISPLAY CURRENT LINEAR SYSTEM TO SOLVE
      IF (MOD(ITER,SCR) .NE. 0) GOTO 25
      WRITE(*,*) '--- ITER=',ITER
      WRITE(*,*) '... JACOBIAN LINEAR 2x2 SYSTEM:'
  20  FORMAT(1X,G15.6,'*LAT? +',G15.6,'*LON? =',G15.6)
      WRITE(*,20) A(1,1), A(1,2), B(1)
      WRITE(*,20) A(2,1), A(2,2), B(2)

C SOLVE THE CURRENT SYSTEM 
  25  ERR = SOLVE2(A,B,DX)

C UPDATE CURRENT SOLUTION (STEP)
C NOTE: SCALING FACTOR AR IS NECESSARY TO ENSURE SMOOTH CONVERGENCE
      DX(1) = AR*DX(1)
      DX(2) = AR*DX(2)

      X(1) = X(1) + DX(1)
      X(2) = X(2) + DX(2)

C UPDATE TERMINATION CONDITIONS
C NOTE: PREC CAN BE DEFINED WITH OTHER CRITERIA (MSE, SSE)
      ITER = ITER + 1
      PREC = DMAX1( DABS(DX(1)), DABS(DX(2)) )

C DISPLAY CURRENT PROGRESS
      IF (MOD(ITER-1,SCR) .NE. 0) GOTO 35
  30  FORMAT(1X,'    SOLVER(',I1,') STEP: (',G13.6,' ,',G13.6,
     *') : PREC=',G13.6)
      WRITE(*,30) ERR, DX(1), DX(2), PREC
  31  FORMAT(1X,'   (LAT,LON) = ',G15.6,' ,',G15.6)
      WRITE(*,31) X(1), X(2)

  35  GOTO 10
C
C ... END OF SOLVER LOOP ...
C

C SOLVER FINISHED, DISPLAY THE RESULTS ...
  70  FORMAT(1X,'TARGET SOLUTION (ITER=',I4,'):')
  71  WRITE(*,*) '---------'
      WRITE(*,70) ITER
  75  FORMAT(5X,'LAT = ',G15.6,' , LON = ',G15.6)
      WRITE(*,75) X(1), X(2)-90

      STOP
      END


C
C ... DISTANCE FUNCTION DEFINITION ... 
C
      FUNCTION HDIST( LAT1, LON1, LAT2, LON2 )

      DOUBLE PRECISION LAT1, LON1, LAT2, LON2, RES
      DOUBLE PRECISION P1, P2, T1, T2, EC, PI

C HAVERSINE DISTANCE (SPHERICAL GEODESICS)
      EC = (6356.752 + 6378.137) / 2
      PI = 2 * DASIN(1.D0)
      P1 = LAT1 / 180.0*PI
      T1 = LON1 / 180.0*PI
      P2 = LAT2 / 180.0*PI
      T2 = LON2 / 180.0*PI

      RES = DCOS(P1) * DCOS(P2) * (1 - DCOS(T2-T1)) / 2
      RES = RES + (1 - DCOS(P2-P1)) / 2
      RES = 2 * EC * DASIN( DSQRT(RES) )

C STANDARD EUCLIDEAN DISTANCE (LINEAR GEODESICS) FOR TESTING
C     RES = DSQRT( (LAT2-LAT1)**2 + (LON2-LON1)**2 )

      HDIST = RES

      RETURN
      END


C
C ... COMBINED DISTANCE DIFFERENCE (TARGET FUNCTIONS) ...
C
      FUNCTION DDF( LY, LX, LAT, LON, TM, K, SPD )

      DOUBLE PRECISION LX, LY, LAT(3), LON(3), TM(3), SPD, RES
      INTEGER K
      COMMON XDIST1

C STEP 1: DIFFERENCE OF GEODESIC DISTANCES AGAINST DETECTION 1
      RES = HDIST(LY,LX,LAT(K),LON(K)) - HDIST(LY,LX,LAT(1),LON(1))

C STEP 2: DIFFERENCE OF TIMES (TDOA) PLUS RANGE 1 ESTIMATION
      RES = RES - (TM(K)-TM(1)) * SPD - XDIST1

      DDF = DABS(RES)

      RETURN
      END
 

C
C ... DETERMINANT-BASED 2x2 LINEAR SYSTEM SOLVER ...
C
C NOTE: DETERMINANT-BASED SOLUTION FOR LARGER LINEAR SYSTEMS IS SLOW
C BUT IN THIS CASE FOR 2x2 IS FINE, PLUS NON-ITERATIVE ALGORITHM
C ENABLES THE COMPILER TO DO MORE AGGRESSIVE SPEED OPTIMIZATIONS
C
      FUNCTION SOLVE2( A, B, DX )

      DOUBLE PRECISION A(2,2), B(2), DX(2), DA
      INTEGER RES

C CHECK THE SYSTEM'S CONDITION
      DA = A(1,1)*A(2,2) - A(2,1)*A(1,2)
      IF (DA .EQ. 0.0) GOTO 82

C SYSTEM IS FULL RANK, CALCULATE SOLUTIONS
  80  DX(1) = ( B(1)*A(2,2) - B(2)*A(1,2) ) / DA
      DX(2) = ( A(1,1)*B(2) - A(2,1)*B(1) ) / DA
      RES = 0
      GOTO 85

C SYSTEM IS ILL-DEFINED, REPORT ERROR
  82  RES = 1

  85  SOLVE2 = RES

      RETURN
      END  
